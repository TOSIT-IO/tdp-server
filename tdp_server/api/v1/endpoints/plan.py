import logging
from typing import List

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from tdp.core.collections import Collections
from tdp.core.dag import Dag
from tdp.core.variables import ClusterVariables

from tdp_server.api import dependencies
from tdp_server.schemas import (
    DeployRequest,
    Operation,
    OperationsRequest,
    ResumeRequest,
)
from tdp_server.services import DeploymentPlanService

logger = logging.getLogger("tdp_server")
router = APIRouter()


@router.post(
    "/dag",
    dependencies=[Depends(dependencies.read_protected)],
    response_model=List[Operation],
    responses={**dependencies.COMMON_RESPONSES},
)
async def dag(
    *,
    deploy_request: DeployRequest = DeployRequest(),
    dag: Dag = Depends(dependencies.get_dag),
) -> List[Operation]:
    """Returns operations generated by the dag"""
    try:
        deployment_plan = await DeploymentPlanService.from_request(dag, deploy_request)
    except ValueError as e:
        logger.exception(e)
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    return await DeploymentPlanService.get_plan_as_list(deployment_plan)


@router.post(
    "/operations",
    dependencies=[Depends(dependencies.read_protected)],
    response_model=List[Operation],
    responses={**dependencies.COMMON_RESPONSES},
)
async def operations(
    operations_request: OperationsRequest,
    *,
    collections: Collections = Depends(dependencies.get_collections),
):
    """Returns operations from input"""
    try:
        deployment_plan = await DeploymentPlanService.from_operations_request(
            collections, operations_request
        )
    except ValueError as e:
        logger.exception(e)
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    return await DeploymentPlanService.get_plan_as_list(deployment_plan)


@router.post(
    "/resume",
    dependencies=[Depends(dependencies.read_protected)],
    response_model=List[Operation],
    responses={**dependencies.COMMON_RESPONSES},
)
async def resume(
    *,
    resume_request: ResumeRequest = ResumeRequest(),
    db: Session = Depends(dependencies.get_db),
    dag: Dag = Depends(dependencies.get_dag),
):
    """Returns operations to run if resume is needed"""
    try:
        deployment_plan = await DeploymentPlanService.from_resume_request(
            db, dag, resume_request
        )
    except ValueError as e:
        logger.exception(e)
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    return await DeploymentPlanService.get_plan_as_list(deployment_plan)


@router.post(
    "/reconfigure",
    dependencies=[Depends(dependencies.read_protected)],
    response_model=List[Operation],
    responses={**dependencies.COMMON_RESPONSES},
)
async def reconfigure(
    *,
    db: Session = Depends(dependencies.get_db),
    dag: Dag = Depends(dependencies.get_dag),
    cluster_variables: ClusterVariables = Depends(dependencies.get_cluster_variables),
):
    """Returns operations to run to reconfigure the cluster"""
    try:
        deployment_plan = await DeploymentPlanService.from_reconfigure_request(
            db, dag, cluster_variables
        )
    except ValueError as e:
        logger.exception(e)
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    return await DeploymentPlanService.get_plan_as_list(deployment_plan)
